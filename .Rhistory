## Data assigning & object preps ##
# Load a dataset
df <- read_csv("covid19_map_state.csv")
# Create map layers/tool tips
df$hover <- with(df, paste(state_full, '<br>'))
## Plotly_Map this data: l, g, p arguments.##
# Give state light white boundaries with `l` ojbect
l <- list(color = "White", width = 0.5)
# Specify some map options with `g` object
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
# Create a plotting map object with `p` object for cases
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~cases, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Blues'
) %>%
colorbar(title = "Number of Cases") %>%
layout(
title = 'Confirmed Cases by State<br>(As of July 8, 2020)',
geo = g
)
# Create a plotting map object with `p2` object for deaths
p2 <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~deaths, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Reds'
) %>%
colorbar(title = "Number of Deaths") %>%
layout(
title = 'Confirmed Deaths by State<br>(As of July 8, 2020)',
geo = g
)
### For the upcomoing version, I want to figure out a way to click on each state, then details on funding type can be displayed on the right bottom corner as a box.
# Assign the dataset to global environment
assign("df", df, envir=globalenv())
## ui.R: All about header, sidebar, and body ##
# Create a Header
header <- dashboardHeader(title = "COVID-19 in U.S.")
# Create a Sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Map by Cases", tabName = "dashboard", icon = icon("th")),
menuItem("Map by Deaths", tabName = "widgets", icon = icon("th"))
))
# Create a Body
body <- dashboardBody(
tabItems(
#First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "How many COVID-19 cases are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number of cases reported to be caused by coronavirus in the United States. The data is retreived from The New York Times, "U.S. Coronavorus Map: Cases Surpass 5,000". West Viginia remains the only state with no reported coronavirus cases as of 1:21 p.m. PDT, March 17, 2020.'
),
box(
title = "COVID-19 in the United States", p, width = 8
)
)
),
#Second tab content
tabItem(tabName = "widgets",
fluidRow(
box(
title = "How many COVID-19 deaths are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number deaths reported to be caused by coronavirus in the United States. The data is retreived from The New York Times, "U.S. Coronavorus Map: Cases Surpass 5,000". Washington state has reported the most number of deaths as of 1:21 p.m. PDT, March 17, 2020.'
),
box(
title = "COVID-19 in the United States", p2, width = 8
)
)
)
)
)
# Assign everything to UI
ui <- dashboardPage(header, sidebar, body, skin = "purple")
## server.R ##
server <- function(input, output) {}
## Creating the final product ##
shinyApp(ui, server)
## Load libraries ##
library(shiny)          # Shiny web app
library(shinydashboard) # ShinyDashboard
library(plotly)         # Interactive plotly map/BI
library(tidyverse)         # Load CSV data sets
## Data assigning & object preps ##
# Load a dataset
df <- read_csv("covid19_map_state.csv")
# Create map layers/tool tips
df$hover <- with(df, paste(state_full, '<br>'))
## Plotly_Map this data: l, g, p arguments.##
# Give state light white boundaries with `l` ojbect
l <- list(color = "White", width = 0.5)
# Specify some map options with `g` object
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
# Create a plotting map object with `p` object for cases
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~cases, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Blues'
) %>%
colorbar(title = "Number of Cases") %>%
layout(
title = 'Confirmed Cases by State<br>(As of July 8, 2020)',
geo = g
)
# Create a plotting map object with `p2` object for deaths
p2 <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~deaths, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Reds'
) %>%
colorbar(title = "Number of Deaths") %>%
layout(
title = 'Confirmed Deaths by State<br>(As of July 8, 2020)',
geo = g
)
# Assign the dataset to global environment
assign("df", df, envir=globalenv())
## ui.R: All about header, sidebar, and body ##
# Create a Header
header <- dashboardHeader(title = "COVID-19 in U.S.")
# Create a Sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Map by Cases", tabName = "dashboard", icon = icon("th")),
menuItem("Map by Deaths", tabName = "widgets", icon = icon("th"))
))
# Create a Body
body <- dashboardBody(
tabItems(
#First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "How many COVID-19 cases are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number of cases reported to be caused by coronavirus in the United States. The data is retreived from The New York Times, "U.S. Coronavorus Map: Cases Surpass 5,000". West Viginia remains the only state with no reported coronavirus cases as of 1:21 p.m. PDT, March 17, 2020.'
),
box(
title = "COVID-19 in the United States", p, width = 8
)
)
),
#Second tab content
tabItem(tabName = "widgets",
fluidRow(
box(
title = "How many COVID-19 deaths are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number deaths reported to be caused by coronavirus in the United States. The data is retreived from The New York Times, "U.S. Coronavorus Map: Cases Surpass 5,000". Washington state has reported the most number of deaths as of 1:21 p.m. PDT, March 17, 2020.'
),
box(
title = "COVID-19 in the United States", p2, width = 8
)
)
)
)
)
# Assign everything to UI
ui <- dashboardPage(header, sidebar, body, skin = "purple")
## server.R ##
server <- function(input, output) {}
## Creating the final product ##
shinyApp(ui, server)
## Load libraries ##
library(shiny)          # Shiny web app
library(shinydashboard) # ShinyDashboard
library(plotly)         # Interactive plotly map/BI
library(tidyverse)         # Load CSV data sets
## Data assigning & object preps ##
# Load a dataset
df <- read_csv("covid19_map_state.csv")
# Create map layers/tool tips
df$hover <- with(df, paste(state_full, '<br>'))
## Plotly_Map this data: l, g, p arguments.##
# Give state light white boundaries with `l` ojbect
l <- list(color = "White", width = 0.5)
# Specify some map options with `g` object
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
# Create a plotting map object with `p` object for cases
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~cases, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Blues'
) %>%
colorbar(title = "Number of Cases") %>%
layout(
title = 'Confirmed Cases by State<br>(As of July 8, 2020)',
geo = g
)
# Create a plotting map object with `p2` object for deaths
p2 <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~deaths, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Reds'
) %>%
colorbar(title = "Number of Deaths") %>%
layout(
title = 'Confirmed Deaths by State<br>(As of July 8, 2020)',
geo = g
)
# Assign the dataset to global environment
assign("df", df, envir=globalenv())
## ui.R: All about header, sidebar, and body ##
# Create a Header
header <- dashboardHeader(title = "COVID-19 in U.S.")
# Create a Sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Map by Cases", tabName = "dashboard", icon = icon("th")),
menuItem("Map by Deaths", tabName = "widgets", icon = icon("th"))
))
# Create a Body
body <- dashboardBody(
tabItems(
#First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "How many COVID-19 cases are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number of cases reported to be caused by coronavirus in the United States. The data was retreived on July 8, 2020.'
),
box(
title = "COVID-19 in the United States", p, width = 8
)
)
),
#Second tab content
tabItem(tabName = "widgets",
fluidRow(
box(
title = "How many COVID-19 deaths are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number deaths reported to be caused by coronavirus in the United States. The data was retreived on July 8, 2020.'
),
box(
title = "COVID-19 in the United States", p2, width = 8
)
)
)
)
)
# Assign everything to UI
ui <- dashboardPage(header, sidebar, body, skin = "purple")
## server.R ##
server <- function(input, output) {}
## Creating the final product ##
shinyApp(ui, server)
## ui.R: All about header, sidebar, and body ##
# Create a Header
header <- dashboardHeader(title = "COVID-19 in U.S.")
# Create a Sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Map by Cases", tabName = "dashboard", icon = icon("th")),
menuItem("Map by Deaths", tabName = "widgets", icon = icon("th"))
))
# Create a Body
body <- dashboardBody(
tabItems(
#First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "How many COVID-19 cases are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number of cases reported to be caused by coronavirus in the United States. The data was retreived on July 8, 2020. New York state has reported the most number of confirmed cases.'
),
box(
title = "COVID-19 in the United States", p, width = 8
)
)
),
#Second tab content
tabItem(tabName = "widgets",
fluidRow(
box(
title = "How many COVID-19 deaths are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number deaths reported to be caused by coronavirus in the United States. The data was retreived on July 8, 2020.'
),
box(
title = "COVID-19 in the United States", p2, width = 8
)
)
)
)
)
# Assign everything to UI
ui <- dashboardPage(header, sidebar, body, skin = "purple")
## server.R ##
server <- function(input, output) {}
## Creating the final product ##
shinyApp(ui, server)
#load libraries
library(tidyverse)
library(RColorBrewer)
source("http://staff.washington.edu/kpleung/vis/theme/theme_cavis.R")
library(ggExtra)
library(extrafont)
library(ggthemes)
# font_import() #import extra fonts
fonttable() # this will show a table of available fonts
# Get nice colors
brewer <- brewer.pal(8, "Set2")
green <- brewer[1]
orange <- brewer[2]
blue <- brewer[3]
pink <- brewer[4]
grass <- brewer[5]
yellow <- brewer[6]
brown <- brewer[7]
gray <- brewer[8]
#load a daataset
owid_covid_data <- read_csv("owid-covid-data.csv")
#str(owid_covid_data)
#subset the dataset
covid_us <- owid_covid_data %>% filter (location == "United States") %>% filter (date >= as.Date("2019-01-21"))
#Epidemiologic Curves
ggplot(data = covid_us, aes(x = date, y = new_cases)) +
geom_bar(stat = "identity", fill = "#0C6ABF") +
labs(title = "Confirmed COVID-19 Case Counts in the U.S.",
subtitle = "From January 20, 2020 to July 6, 2020",
caption = "Data retrieved from Our World in Data",
x = " \nDate of Illness Onset", y = "") +
theme_light() +
theme(plot.title = element_text(color="black", size=18, face="bold", family="Encode Sans Normal"),
plot.subtitle = element_text(color="#969494", size=16, family="Encode Sans Narrow"),
plot.caption = element_text(color="#969494", face="italic", size=12, family="Encode Sans Narrow"),
axis.title.x = element_text(family="Encode Sans Narrow", size=16),
axis.title.y = element_text(family="Encode Sans Narrow", size=16),
axis.text = element_text(family="Encode Sans Narrow", size = 14)) +
scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%b %Y") +
removeGridX() +
scale_y_continuous(labels = scales::comma, expand = c(0, 0))
#Cumulative Counts in the world
#subset the dataset
covid_world <- owid_covid_data %>% filter (location == "United States" | location == "Mexico" | location == "Canada" | location == "China" | location == "Japan" | location == "Italy" | location == "United Kingdom"| location == "Brazil")
#str(covid_world)
ggplot(data = covid_world, aes(x = date, y = total_cases)) +
geom_line(aes(color = location), size = 1.2) +
scale_color_manual(values = c(gray, orange, blue, pink, grass, yellow, brown, green)) +
labs(title = "Cumulative COVID-19 Case Counts in the World",
subtitle = "From December 31, 2019 to July 6, 2020",
caption = "Data retrieved from Our World in Data",
x = " \nDate of First Positive Lab", y = "") +
theme_light() +
theme(plot.title = element_text(color="black", size=16, face="bold", family="Encode Sans Normal"),
plot.subtitle = element_text(color="#969494", size=14, family="Encode Sans Narrow"),
plot.caption = element_text(color="#969494", face="italic", size=12, family="Encode Sans Narrow"),
axis.title.x = element_text(family="Encode Sans Narrow", size=16),
axis.title.y = element_text(family="Encode Sans Narrow", size=16),
axis.text = element_text(family="Encode Sans Narrow", size = 14),
axis.ticks = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.title = element_blank()) +
scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%b %Y") +
removeGridX() +
scale_y_continuous(labels = scales::comma)
#Cumulative Counts by continent
#subset the dataset
covid_continent <- owid_covid_data %>% filter (!is.na(continent))
ggplot(data = covid_continent, aes(x = date, y = total_cases, group = location, color = continent)) +
geom_line() +
facet_wrap(~ continent) +
scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%b %Y") +
labs(title = "Cumulative COVID-19 Case Counts by Continent",
subtitle = "From December 31, 2019 to July 6, 2020",
caption = "Data retrieved from Our World in Data",
x = " \nDate of First Positive Lab", y = "") +
scale_colour_wsj() +
theme_wsj() +
theme(plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.ticks = element_blank(),
panel.border = element_blank(),
legend.position = "none",
strip.text = element_text(size = 16)) +
scale_y_continuous(labels = scales::comma)
### Figure 4. Cumulative Counts in the U.S.
#Cumulative Counts in the U.S.
ggplot(data = covid_us, aes(x = date, y = total_cases)) +
geom_line(color = "#0C6ABF") +
labs(title = "Cumulative COVID-19 Case Counts in the U.S.",
subtitle = "From January 20, 2020 to July 6, 2020",
caption = "Data retrieved from Our World in Data",
x = " \nDate of First Positive Lab", y = "") +
theme_light() +
theme(plot.title = element_text(color="black", size=12, face="bold", family="Encode Sans Normal"),
plot.subtitle = element_text(color="#969494", size=10, family="Encode Sans Narrow"),
plot.caption = element_text(color="#969494", face="italic", size=4, family="Encode Sans Narrow"),
axis.title.x = element_text(family="Encode Sans Narrow", size=16),
axis.title.y = element_text(family="Encode Sans Narrow", size=16),
axis.text = element_text(family="Encode Sans Narrow", size = 14),
axis.ticks = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black")) +
scale_x_date(date_breaks = "1 month", date_minor_breaks = "1 week", date_labels = "%b %Y") +
removeGridX() +
scale_y_continuous(labels = scales::comma) +
scale_colour_wsj() +
theme_wsj()
## Load libraries ##
library(shiny)          # Shiny web app
library(shinydashboard) # ShinyDashboard
library(plotly)         # Interactive plotly map/BI
library(tidyverse)         # Load CSV data sets
## Data assigning & object preps ##
# Load a dataset
df <- read_csv("covid19_map_state.csv")
# Create map layers/tool tips
df$hover <- with(df, paste(state_full, '<br>'))
## Plotly_Map this data: l, g, p arguments.##
# Give state light white boundaries with `l` ojbect
l <- list(color = "White", width = 0.5)
# Specify some map options with `g` object
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
# Create a plotting map object with `p` object for cases
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~cases, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Blues'
) %>%
colorbar(title = "Number of Cases") %>%
layout(
title = 'Confirmed Cases by State<br>(As of July 8, 2020)',
geo = g
)
# Create a plotting map object with `p2` object for deaths
p2 <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~deaths, text = ~hover, locations = ~state, marker = list (line=l),
color = ~cases, colors = 'Reds'
) %>%
colorbar(title = "Number of Deaths") %>%
layout(
title = 'Confirmed Deaths by State<br>(As of July 8, 2020)',
geo = g
)
# Assign the dataset to global environment
assign("df", df, envir=globalenv())
## ui.R: All about header, sidebar, and body ##
# Create a Header
header <- dashboardHeader(title = "COVID-19 in U.S.")
# Create a Sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Map by Cases", tabName = "dashboard", icon = icon("th")),
menuItem("Map by Deaths", tabName = "widgets", icon = icon("th"))
))
# Create a Body
body <- dashboardBody(
tabItems(
#First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "How many COVID-19 cases are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number of cases reported to be caused by coronavirus in the United States. The data was retreived on July 8, 2020. New York state has reported the most number of confirmed cases.'
),
box(
title = "COVID-19 in the United States", p, width = 8
)
)
),
#Second tab content
tabItem(tabName = "widgets",
fluidRow(
box(
title = "How many COVID-19 deaths are reported in the United States?",
width = 4,
status = "primary", 'This is a map for the number deaths reported to be caused by coronavirus in the United States. The data was retreived on July 8, 2020.'
),
box(
title = "COVID-19 in the United States", p2, width = 8
)
)
)
)
)
# Assign everything to UI
ui <- dashboardPage(header, sidebar, body, skin = "purple")
## server.R ##
server <- function(input, output) {}
## Creating the final product ##
shinyApp(ui, server)
View(owid_covid_data)
